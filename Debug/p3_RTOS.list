
p3_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080045e0  080045e0  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e0  080045e0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000060  08004648  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  08004648  00006bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001292b  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c17  00000000  00000000  000189b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdd  00000000  00000000  0001c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002796  00000000  00000000  0001d355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124ad  00000000  00000000  0001faeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091515  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c34ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  000c34f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c7d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080044f8 	.word	0x080044f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080044f8 	.word	0x080044f8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa4c 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f832 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f876 	bl	800024c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fba8 	bl	80018b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a0d      	ldr	r2, [pc, #52]	@ (800019c <main+0x4c>)
 8000166:	2100      	movs	r1, #0
 8000168:	480d      	ldr	r0, [pc, #52]	@ (80001a0 <main+0x50>)
 800016a:	f001 fc09 	bl	8001980 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0c      	ldr	r2, [pc, #48]	@ (80001a4 <main+0x54>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of green_Led */
  green_LedHandle = osThreadNew(green_led, NULL, &green_Led_attributes);
 8000174:	4a0c      	ldr	r2, [pc, #48]	@ (80001a8 <main+0x58>)
 8000176:	2100      	movs	r1, #0
 8000178:	480c      	ldr	r0, [pc, #48]	@ (80001ac <main+0x5c>)
 800017a:	f001 fc01 	bl	8001980 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	@ (80001b0 <main+0x60>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of red_Led */
  red_LedHandle = osThreadNew(red_led, NULL, &red_Led_attributes);
 8000184:	4a0b      	ldr	r2, [pc, #44]	@ (80001b4 <main+0x64>)
 8000186:	2100      	movs	r1, #0
 8000188:	480b      	ldr	r0, [pc, #44]	@ (80001b8 <main+0x68>)
 800018a:	f001 fbf9 	bl	8001980 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0a      	ldr	r2, [pc, #40]	@ (80001bc <main+0x6c>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f001 fbc0 	bl	8001918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	bf00      	nop
 800019a:	e7fd      	b.n	8000198 <main+0x48>
 800019c:	08004548 	.word	0x08004548
 80001a0:	080002cd 	.word	0x080002cd
 80001a4:	2000007c 	.word	0x2000007c
 80001a8:	0800456c 	.word	0x0800456c
 80001ac:	080002dd 	.word	0x080002dd
 80001b0:	20000080 	.word	0x20000080
 80001b4:	08004590 	.word	0x08004590
 80001b8:	08000349 	.word	0x08000349
 80001bc:	20000084 	.word	0x20000084

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	@ 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	@ 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f004 f8ac 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcdd 	bl	8000bc8 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f8e0 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff4a 	bl	80010cc <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800023e:	f000 f8cb 	bl	80003d8 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000260:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <MX_GPIO_Init+0x78>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <MX_GPIO_Init+0x78>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <MX_GPIO_Init+0x78>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <MX_GPIO_Init+0x78>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a11      	ldr	r2, [pc, #68]	@ (80002c4 <MX_GPIO_Init+0x78>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <MX_GPIO_Init+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_led_task_Pin|red_led_Pin|green_led_task_Pin|green_led_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <MX_GPIO_Init+0x7c>)
 8000298:	f000 fc64 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red_led_task_Pin red_led_Pin green_led_task_Pin green_led_Pin */
  GPIO_InitStruct.Pin = red_led_task_Pin|red_led_Pin|green_led_task_Pin|green_led_Pin;
 800029c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80002a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <MX_GPIO_Init+0x7c>)
 80002b6:	f000 fad1 	bl	800085c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800

080002cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f001 fbfd 	bl	8001ad4 <osDelay>
 80002da:	e7fb      	b.n	80002d4 <StartDefaultTask+0x8>

080002dc <green_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_green_led */
void green_led(void *argument)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN green_led */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002ea:	4816      	ldr	r0, [pc, #88]	@ (8000344 <green_led+0x68>)
 80002ec:	f000 fc3a 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002f6:	4813      	ldr	r0, [pc, #76]	@ (8000344 <green_led+0x68>)
 80002f8:	f000 fc34 	bl	8000b64 <HAL_GPIO_WritePin>
	for (int var = 0; var < 80; ++var) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e012      	b.n	8000328 <green_led+0x4c>
	HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 8000302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000306:	480f      	ldr	r0, [pc, #60]	@ (8000344 <green_led+0x68>)
 8000308:	f000 fc44 	bl	8000b94 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 800030c:	2019      	movs	r0, #25
 800030e:	f000 f9a1 	bl	8000654 <HAL_Delay>
	HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 8000312:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000316:	480b      	ldr	r0, [pc, #44]	@ (8000344 <green_led+0x68>)
 8000318:	f000 fc3c 	bl	8000b94 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 800031c:	2019      	movs	r0, #25
 800031e:	f000 f999 	bl	8000654 <HAL_Delay>
	for (int var = 0; var < 80; ++var) {
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3301      	adds	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2b4f      	cmp	r3, #79	@ 0x4f
 800032c:	dde9      	ble.n	8000302 <green_led+0x26>
	}
    HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <green_led+0x68>)
 8000336:	f000 fc15 	bl	8000b64 <HAL_GPIO_WritePin>
    osDelay(6000);
 800033a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800033e:	f001 fbc9 	bl	8001ad4 <osDelay>
	HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 8000342:	e7cf      	b.n	80002e4 <green_led+0x8>
 8000344:	40010800 	.word	0x40010800

08000348 <red_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_red_led */
void red_led(void *argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN red_led */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000356:	4816      	ldr	r0, [pc, #88]	@ (80003b0 <red_led+0x68>)
 8000358:	f000 fc04 	bl	8000b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000362:	4813      	ldr	r0, [pc, #76]	@ (80003b0 <red_led+0x68>)
 8000364:	f000 fbfe 	bl	8000b64 <HAL_GPIO_WritePin>
		for (int var = 0; var < 10; ++var) {
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e012      	b.n	8000394 <red_led+0x4c>
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800036e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000372:	480f      	ldr	r0, [pc, #60]	@ (80003b0 <red_led+0x68>)
 8000374:	f000 fc0e 	bl	8000b94 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 8000378:	2019      	movs	r0, #25
 800037a:	f000 f96b 	bl	8000654 <HAL_Delay>
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800037e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000382:	480b      	ldr	r0, [pc, #44]	@ (80003b0 <red_led+0x68>)
 8000384:	f000 fc06 	bl	8000b94 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 8000388:	2019      	movs	r0, #25
 800038a:	f000 f963 	bl	8000654 <HAL_Delay>
		for (int var = 0; var < 10; ++var) {
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3301      	adds	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2b09      	cmp	r3, #9
 8000398:	dde9      	ble.n	800036e <red_led+0x26>
		}
	    HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a0:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <red_led+0x68>)
 80003a2:	f000 fbdf 	bl	8000b64 <HAL_GPIO_WritePin>
	    osDelay(1500);
 80003a6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80003aa:	f001 fb93 	bl	8001ad4 <osDelay>
		HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 80003ae:	e7cf      	b.n	8000350 <red_led+0x8>
 80003b0:	40010800 	.word	0x40010800

080003b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d101      	bne.n	80003ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003c6:	f000 f929 	bl	800061c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40000800 	.word	0x40000800

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b18      	ldr	r3, [pc, #96]	@ (800044c <HAL_MspInit+0x68>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a17      	ldr	r2, [pc, #92]	@ (800044c <HAL_MspInit+0x68>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_MspInit+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <HAL_MspInit+0x68>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a11      	ldr	r2, [pc, #68]	@ (800044c <HAL_MspInit+0x68>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x68>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	210f      	movs	r1, #15
 800041e:	f06f 0001 	mvn.w	r0, #1
 8000422:	f000 f9f0 	bl	8000806 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_MspInit+0x6c>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_MspInit+0x6c>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	@ 0x38
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000460:	2300      	movs	r3, #0
 8000462:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800046a:	4b34      	ldr	r3, [pc, #208]	@ (800053c <HAL_InitTick+0xe8>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a33      	ldr	r2, [pc, #204]	@ (800053c <HAL_InitTick+0xe8>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b31      	ldr	r3, [pc, #196]	@ (800053c <HAL_InitTick+0xe8>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000482:	f107 0210 	add.w	r2, r7, #16
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f000 ff79 	bl	8001384 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000492:	6a3b      	ldr	r3, [r7, #32]
 8000494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000498:	2b00      	cmp	r3, #0
 800049a:	d103      	bne.n	80004a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800049c:	f000 ff5e 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 80004a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80004a2:	e004      	b.n	80004ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004a4:	f000 ff5a 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 80004a8:	4603      	mov	r3, r0
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004b0:	4a23      	ldr	r2, [pc, #140]	@ (8000540 <HAL_InitTick+0xec>)
 80004b2:	fba2 2303 	umull	r2, r3, r2, r3
 80004b6:	0c9b      	lsrs	r3, r3, #18
 80004b8:	3b01      	subs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <HAL_InitTick+0xf0>)
 80004be:	4a22      	ldr	r2, [pc, #136]	@ (8000548 <HAL_InitTick+0xf4>)
 80004c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004c2:	4b20      	ldr	r3, [pc, #128]	@ (8000544 <HAL_InitTick+0xf0>)
 80004c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80004ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000544 <HAL_InitTick+0xf0>)
 80004cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <HAL_InitTick+0xf0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <HAL_InitTick+0xf0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <HAL_InitTick+0xf0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80004e2:	4818      	ldr	r0, [pc, #96]	@ (8000544 <HAL_InitTick+0xf0>)
 80004e4:	f000 ff9c 	bl	8001420 <HAL_TIM_Base_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80004ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11b      	bne.n	800052e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80004f6:	4813      	ldr	r0, [pc, #76]	@ (8000544 <HAL_InitTick+0xf0>)
 80004f8:	f000 ffea 	bl	80014d0 <HAL_TIM_Base_Start_IT>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000502:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000506:	2b00      	cmp	r3, #0
 8000508:	d111      	bne.n	800052e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800050a:	201e      	movs	r0, #30
 800050c:	f000 f997 	bl	800083e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b0f      	cmp	r3, #15
 8000514:	d808      	bhi.n	8000528 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000516:	2200      	movs	r2, #0
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	201e      	movs	r0, #30
 800051c:	f000 f973 	bl	8000806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000520:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <HAL_InitTick+0xf8>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	e002      	b.n	800052e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000528:	2301      	movs	r3, #1
 800052a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800052e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000532:	4618      	mov	r0, r3
 8000534:	3738      	adds	r7, #56	@ 0x38
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	431bde83 	.word	0x431bde83
 8000544:	20000088 	.word	0x20000088
 8000548:	40000800 	.word	0x40000800
 800054c:	20000004 	.word	0x20000004

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <MemManage_Handler+0x4>

08000568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <UsageFault_Handler+0x4>

08000578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <TIM4_IRQHandler+0x10>)
 800058a:	f000 fff3 	bl	8001574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000088 	.word	0x20000088

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff fff8 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005aa:	490c      	ldr	r1, [pc, #48]	@ (80005dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c0:	4c09      	ldr	r4, [pc, #36]	@ (80005e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f003 ff0b 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fdbd 	bl	8000150 <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005e0:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 80005e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005e8:	20001bf4 	.word	0x20001bf4

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f8f5 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	200f      	movs	r0, #15
 8000608:	f7ff ff24 	bl	8000454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff feea 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a03      	ldr	r2, [pc, #12]	@ (800063c <HAL_IncTick+0x20>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000008 	.word	0x20000008
 800063c:	200000d0 	.word	0x200000d0

08000640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	@ (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	200000d0 	.word	0x200000d0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff fff0 	bl	8000640 <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_Delay+0x44>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffe0 	bl	8000640 <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000008 	.word	0x20000008

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	@ (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	@ (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	@ (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	@ 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	@ 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff4f 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff64 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ffb2 	bl	800078c <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff57 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	@ 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e169      	b.n	8000b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8158 	bne.w	8000b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a9a      	ldr	r2, [pc, #616]	@ (8000afc <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4a98      	ldr	r2, [pc, #608]	@ (8000afc <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4a98      	ldr	r2, [pc, #608]	@ (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a96      	ldr	r2, [pc, #600]	@ (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a96      	ldr	r2, [pc, #600]	@ (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a94      	ldr	r2, [pc, #592]	@ (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a94      	ldr	r2, [pc, #592]	@ (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a92      	ldr	r2, [pc, #584]	@ (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a92      	ldr	r2, [pc, #584]	@ (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a90      	ldr	r2, [pc, #576]	@ (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	@ (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a79      	ldr	r2, [pc, #484]	@ (8000b10 <HAL_GPIO_Init+0x2b4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	@ 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	@ 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a48      	ldr	r2, [pc, #288]	@ (8000b18 <HAL_GPIO_Init+0x2bc>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	@ (8000b1c <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3f      	ldr	r2, [pc, #252]	@ (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b24 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3d      	ldr	r2, [pc, #244]	@ (8000b28 <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5a:	492f      	ldr	r1, [pc, #188]	@ (8000b18 <HAL_GPIO_Init+0x2bc>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	492c      	ldr	r1, [pc, #176]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a82:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4928      	ldr	r1, [pc, #160]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4922      	ldr	r1, [pc, #136]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	491e      	ldr	r1, [pc, #120]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4918      	ldr	r1, [pc, #96]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4914      	ldr	r1, [pc, #80]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	490e      	ldr	r1, [pc, #56]	@ (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]
 8000af8:	e021      	b.n	8000b3e <HAL_GPIO_Init+0x2e2>
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_GPIO_Init+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4909      	ldr	r1, [pc, #36]	@ (8000b60 <HAL_GPIO_Init+0x304>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f ae8e 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	372c      	adds	r7, #44	@ 0x2c
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43d9      	mvns	r1, r3
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	611a      	str	r2, [r3, #16]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e272      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8087 	beq.w	8000cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be8:	4b92      	ldr	r3, [pc, #584]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d00c      	beq.n	8000c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d112      	bne.n	8000c26 <HAL_RCC_OscConfig+0x5e>
 8000c00:	4b8c      	ldr	r3, [pc, #560]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c0c:	d10b      	bne.n	8000c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0e:	4b89      	ldr	r3, [pc, #548]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d06c      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x12c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d168      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e24c      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c2e:	d106      	bne.n	8000c3e <HAL_RCC_OscConfig+0x76>
 8000c30:	4b80      	ldr	r3, [pc, #512]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a7f      	ldr	r2, [pc, #508]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e02e      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10c      	bne.n	8000c60 <HAL_RCC_OscConfig+0x98>
 8000c46:	4b7b      	ldr	r3, [pc, #492]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b78      	ldr	r3, [pc, #480]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a77      	ldr	r2, [pc, #476]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e01d      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c68:	d10c      	bne.n	8000c84 <HAL_RCC_OscConfig+0xbc>
 8000c6a:	4b72      	ldr	r3, [pc, #456]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a71      	ldr	r2, [pc, #452]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b6f      	ldr	r3, [pc, #444]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e00b      	b.n	8000c9c <HAL_RCC_OscConfig+0xd4>
 8000c84:	4b6b      	ldr	r3, [pc, #428]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a6a      	ldr	r2, [pc, #424]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b68      	ldr	r3, [pc, #416]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a67      	ldr	r2, [pc, #412]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d013      	beq.n	8000ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fccc 	bl	8000640 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fcc8 	bl	8000640 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b64      	cmp	r3, #100	@ 0x64
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e200      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f0      	beq.n	8000cac <HAL_RCC_OscConfig+0xe4>
 8000cca:	e014      	b.n	8000cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fcb8 	bl	8000640 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fcb4 	bl	8000640 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	@ 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1ec      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	4b53      	ldr	r3, [pc, #332]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x10c>
 8000cf2:	e000      	b.n	8000cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d063      	beq.n	8000dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d02:	4b4c      	ldr	r3, [pc, #304]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00b      	beq.n	8000d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0e:	4b49      	ldr	r3, [pc, #292]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d11c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x18c>
 8000d1a:	4b46      	ldr	r3, [pc, #280]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d116      	bne.n	8000d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d26:	4b43      	ldr	r3, [pc, #268]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_RCC_OscConfig+0x176>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d001      	beq.n	8000d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e1c0      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4939      	ldr	r1, [pc, #228]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d52:	e03a      	b.n	8000dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d020      	beq.n	8000d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc6d 	bl	8000640 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fc69 	bl	8000640 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e1a1      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	4927      	ldr	r1, [pc, #156]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9e:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <HAL_RCC_OscConfig+0x270>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc4c 	bl	8000640 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc48 	bl	8000640 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e180      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d03a      	beq.n	8000e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d019      	beq.n	8000e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <HAL_RCC_OscConfig+0x274>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc2c 	bl	8000640 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc28 	bl	8000640 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e160      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 faea 	bl	80013e4 <RCC_Delay>
 8000e10:	e01c      	b.n	8000e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_RCC_OscConfig+0x274>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e18:	f7ff fc12 	bl	8000640 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1e:	e00f      	b.n	8000e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fc0e 	bl	8000640 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d908      	bls.n	8000e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e146      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	42420000 	.word	0x42420000
 8000e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	4b92      	ldr	r3, [pc, #584]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e9      	bne.n	8000e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80a6 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10d      	bne.n	8000e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b88      	ldr	r3, [pc, #544]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a87      	ldr	r2, [pc, #540]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b85      	ldr	r3, [pc, #532]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e82:	2301      	movs	r3, #1
 8000e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e86:	4b82      	ldr	r3, [pc, #520]	@ (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d118      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e92:	4b7f      	ldr	r3, [pc, #508]	@ (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7e      	ldr	r2, [pc, #504]	@ (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fbcf 	bl	8000640 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea6:	f7ff fbcb 	bl	8000640 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	@ 0x64
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e103      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	4b75      	ldr	r3, [pc, #468]	@ (8001090 <HAL_RCC_OscConfig+0x4c8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x312>
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e02d      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10c      	bne.n	8000efc <HAL_RCC_OscConfig+0x334>
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a69      	ldr	r2, [pc, #420]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b67      	ldr	r3, [pc, #412]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a66      	ldr	r2, [pc, #408]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	e01c      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d10c      	bne.n	8000f1e <HAL_RCC_OscConfig+0x356>
 8000f04:	4b61      	ldr	r3, [pc, #388]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a60      	ldr	r2, [pc, #384]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6213      	str	r3, [r2, #32]
 8000f10:	4b5e      	ldr	r3, [pc, #376]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a5d      	ldr	r2, [pc, #372]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6213      	str	r3, [r2, #32]
 8000f1c:	e00b      	b.n	8000f36 <HAL_RCC_OscConfig+0x36e>
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a5a      	ldr	r2, [pc, #360]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a57      	ldr	r2, [pc, #348]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d015      	beq.n	8000f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fb7f 	bl	8000640 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fb7b 	bl	8000640 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e0b1      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0ee      	beq.n	8000f46 <HAL_RCC_OscConfig+0x37e>
 8000f68:	e014      	b.n	8000f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb69 	bl	8000640 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f7ff fb65 	bl	8000640 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e09b      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	4b40      	ldr	r3, [pc, #256]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ee      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d105      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb0:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d061      	beq.n	8001080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d146      	bne.n	8001052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc4:	4b33      	ldr	r3, [pc, #204]	@ (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fb39 	bl	8000640 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fb35 	bl	8000640 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e06d      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff8:	d108      	bne.n	800100c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4921      	ldr	r1, [pc, #132]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a19      	ldr	r1, [r3, #32]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	430b      	orrs	r3, r1
 800101e:	491b      	ldr	r1, [pc, #108]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fb09 	bl	8000640 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001032:	f7ff fb05 	bl	8000640 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e03d      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x46a>
 8001050:	e035      	b.n	80010be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <HAL_RCC_OscConfig+0x4cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff faf2 	bl	8000640 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001060:	f7ff faee 	bl	8000640 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e026      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x498>
 800107e:	e01e      	b.n	80010be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e019      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
 800108c:	40021000 	.word	0x40021000
 8001090:	40007000 	.word	0x40007000
 8001094:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_RCC_OscConfig+0x500>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0d0      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b6a      	ldr	r3, [pc, #424]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d910      	bls.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b67      	ldr	r3, [pc, #412]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4965      	ldr	r1, [pc, #404]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b63      	ldr	r3, [pc, #396]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0b8      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001128:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a58      	ldr	r2, [pc, #352]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001140:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800114a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	4b50      	ldr	r3, [pc, #320]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	494d      	ldr	r1, [pc, #308]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d040      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b47      	ldr	r3, [pc, #284]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d115      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e07f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b41      	ldr	r3, [pc, #260]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e073      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b3d      	ldr	r3, [pc, #244]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011aa:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 0203 	bic.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4936      	ldr	r1, [pc, #216]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fa40 	bl	8000640 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c4:	f7ff fa3c 	bl	8000640 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e053      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d210      	bcs.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b24      	ldr	r3, [pc, #144]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4922      	ldr	r1, [pc, #136]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e032      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4916      	ldr	r1, [pc, #88]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	490e      	ldr	r1, [pc, #56]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125a:	f000 f821 	bl	80012a0 <HAL_RCC_GetSysClockFreq>
 800125e:	4602      	mov	r2, r0
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	490a      	ldr	r1, [pc, #40]	@ (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 800126c:	5ccb      	ldrb	r3, [r1, r3]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <HAL_RCC_ClockConfig+0x1cc>)
 8001274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_RCC_ClockConfig+0x1d0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8ea 	bl	8000454 <HAL_InitTick>

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000
 8001290:	40021000 	.word	0x40021000
 8001294:	080045b4 	.word	0x080045b4
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x30>
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d003      	beq.n	80012d6 <HAL_RCC_GetSysClockFreq+0x36>
 80012ce:	e027      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	613b      	str	r3, [r7, #16]
      break;
 80012d4:	e027      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_RCC_GetSysClockFreq+0x94>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	0c5b      	lsrs	r3, r3, #17
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 8001302:	fb03 f202 	mul.w	r2, r3, r2
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e004      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	613b      	str	r3, [r7, #16]
      break;
 800131e:	e002      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x98>)
 8001322:	613b      	str	r3, [r7, #16]
      break;
 8001324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001326:	693b      	ldr	r3, [r7, #16]
}
 8001328:	4618      	mov	r0, r3
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200
 800133c:	080045cc 	.word	0x080045cc
 8001340:	080045dc 	.word	0x080045dc
 8001344:	003d0900 	.word	0x003d0900

08001348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800134c:	4b02      	ldr	r3, [pc, #8]	@ (8001358 <HAL_RCC_GetHCLKFreq+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	20000000 	.word	0x20000000

0800135c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001360:	f7ff fff2 	bl	8001348 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	@ (8001380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	080045c4 	.word	0x080045c4

08001384 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	220f      	movs	r2, #15
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_RCC_GetClockConfig+0x58>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_RCC_GetClockConfig+0x58>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0207 	and.w	r2, r3, #7
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40022000 	.word	0x40022000

080013e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <RCC_Delay+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <RCC_Delay+0x38>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0a5b      	lsrs	r3, r3, #9
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001400:	bf00      	nop
  }
  while (Delay --);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	60fa      	str	r2, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f9      	bne.n	8001400 <RCC_Delay+0x1c>
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000000 	.word	0x20000000
 800141c:	10624dd3 	.word	0x10624dd3

08001420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e041      	b.n	80014b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f839 	bl	80014be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 f9b4 	bl	80017cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d001      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e03a      	b.n	800155e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <HAL_TIM_Base_Start_IT+0x98>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00e      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001512:	d009      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_TIM_Base_Start_IT+0x9c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d004      	beq.n	8001528 <HAL_TIM_Base_Start_IT+0x58>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <HAL_TIM_Base_Start_IT+0xa0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d010      	beq.n	800155c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800154a:	e007      	b.n	800155c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40012c00 	.word	0x40012c00
 800156c:	40000400 	.word	0x40000400
 8001570:	40000800 	.word	0x40000800

08001574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d122      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b02      	cmp	r3, #2
 8001596:	d11b      	bne.n	80015d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0202 	mvn.w	r2, #2
 80015a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8ed 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 80015bc:	e005      	b.n	80015ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f8e0 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8ef 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d122      	bne.n	8001624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d11b      	bne.n	8001624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0204 	mvn.w	r2, #4
 80015f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8c3 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 8001610:	e005      	b.n	800161e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f8b6 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f8c5 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b08      	cmp	r3, #8
 8001630:	d122      	bne.n	8001678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	d11b      	bne.n	8001678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0208 	mvn.w	r2, #8
 8001648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2204      	movs	r2, #4
 800164e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f899 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f88c 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f89b 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d122      	bne.n	80016cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b10      	cmp	r3, #16
 8001692:	d11b      	bne.n	80016cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0210 	mvn.w	r2, #16
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2208      	movs	r2, #8
 80016a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f86f 	bl	8001796 <HAL_TIM_IC_CaptureCallback>
 80016b8:	e005      	b.n	80016c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f862 	bl	8001784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f871 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0201 	mvn.w	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe fe5e 	bl	80003b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	2b80      	cmp	r3, #128	@ 0x80
 8001704:	d10e      	bne.n	8001724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001710:	2b80      	cmp	r3, #128	@ 0x80
 8001712:	d107      	bne.n	8001724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8bf 	bl	80018a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	2b40      	cmp	r3, #64	@ 0x40
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800173c:	2b40      	cmp	r3, #64	@ 0x40
 800173e:	d107      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f835 	bl	80017ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b20      	cmp	r3, #32
 800175c:	d10e      	bne.n	800177c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d107      	bne.n	800177c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0220 	mvn.w	r2, #32
 8001774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f88a 	bl	8001890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a29      	ldr	r2, [pc, #164]	@ (8001884 <TIM_Base_SetConfig+0xb8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00b      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ea:	d007      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <TIM_Base_SetConfig+0xbc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d003      	beq.n	80017fc <TIM_Base_SetConfig+0x30>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a25      	ldr	r2, [pc, #148]	@ (800188c <TIM_Base_SetConfig+0xc0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d108      	bne.n	800180e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <TIM_Base_SetConfig+0xb8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00b      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d007      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <TIM_Base_SetConfig+0xbc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d003      	beq.n	800182e <TIM_Base_SetConfig+0x62>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a18      	ldr	r2, [pc, #96]	@ (800188c <TIM_Base_SetConfig+0xc0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <TIM_Base_SetConfig+0xb8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d103      	bne.n	8001874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	615a      	str	r2, [r3, #20]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018ba:	f3ef 8305 	mrs	r3, IPSR
 80018be:	60bb      	str	r3, [r7, #8]
  return(result);
 80018c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018c6:	f3ef 8310 	mrs	r3, PRIMASK
 80018ca:	607b      	str	r3, [r7, #4]
  return(result);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <osKernelInitialize+0x32>
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <osKernelInitialize+0x60>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d109      	bne.n	80018ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018da:	f3ef 8311 	mrs	r3, BASEPRI
 80018de:	603b      	str	r3, [r7, #0]
  return(result);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80018e6:	f06f 0305 	mvn.w	r3, #5
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e00c      	b.n	8001908 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <osKernelInitialize+0x60>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <osKernelInitialize+0x60>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e002      	b.n	8001908 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001908:	68fb      	ldr	r3, [r7, #12]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200000d4 	.word	0x200000d4

08001918 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800191e:	f3ef 8305 	mrs	r3, IPSR
 8001922:	60bb      	str	r3, [r7, #8]
  return(result);
 8001924:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800192a:	f3ef 8310 	mrs	r3, PRIMASK
 800192e:	607b      	str	r3, [r7, #4]
  return(result);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <osKernelStart+0x32>
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <osKernelStart+0x64>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d109      	bne.n	8001952 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800193e:	f3ef 8311 	mrs	r3, BASEPRI
 8001942:	603b      	str	r3, [r7, #0]
  return(result);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <osKernelStart+0x3a>
    stat = osErrorISR;
 800194a:	f06f 0305 	mvn.w	r3, #5
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e00e      	b.n	8001970 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <osKernelStart+0x64>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <osKernelStart+0x64>)
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001960:	f001 f8a8 	bl	8002ab4 <vTaskStartScheduler>
      stat = osOK;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e002      	b.n	8001970 <osKernelStart+0x58>
    } else {
      stat = osError;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200000d4 	.word	0x200000d4

08001980 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b092      	sub	sp, #72	@ 0x48
 8001984:	af04      	add	r7, sp, #16
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001990:	f3ef 8305 	mrs	r3, IPSR
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8094 	bne.w	8001ac6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199e:	f3ef 8310 	mrs	r3, PRIMASK
 80019a2:	623b      	str	r3, [r7, #32]
  return(result);
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 808d 	bne.w	8001ac6 <osThreadNew+0x146>
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <osThreadNew+0x150>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d106      	bne.n	80019c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019b4:	f3ef 8311 	mrs	r3, BASEPRI
 80019b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 8082 	bne.w	8001ac6 <osThreadNew+0x146>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d07e      	beq.n	8001ac6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80019cc:	2318      	movs	r3, #24
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80019d0:	2300      	movs	r3, #0
 80019d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80019d4:	f107 031b 	add.w	r3, r7, #27
 80019d8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d045      	beq.n	8001a72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <osThreadNew+0x74>
        name = attr->name;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <osThreadNew+0x9a>
 8001a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0a:	2b38      	cmp	r3, #56	@ 0x38
 8001a0c:	d805      	bhi.n	8001a1a <osThreadNew+0x9a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <osThreadNew+0x9e>
        return (NULL);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e054      	b.n	8001ac8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00e      	beq.n	8001a54 <osThreadNew+0xd4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8001a3c:	d90a      	bls.n	8001a54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <osThreadNew+0xd4>
        mem = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a52:	e010      	b.n	8001a76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10c      	bne.n	8001a76 <osThreadNew+0xf6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d108      	bne.n	8001a76 <osThreadNew+0xf6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <osThreadNew+0xf6>
          mem = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a70:	e001      	b.n	8001a76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d110      	bne.n	8001a9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a84:	9202      	str	r2, [sp, #8]
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fe24 	bl	80026e0 <xTaskCreateStatic>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e013      	b.n	8001ac6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fe71 	bl	800279e <xTaskCreate>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <osThreadNew+0x146>
          hTask = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ac6:	697b      	ldr	r3, [r7, #20]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3738      	adds	r7, #56	@ 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200000d4 	.word	0x200000d4

08001ad4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001adc:	f3ef 8305 	mrs	r3, IPSR
 8001ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8001ae2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8001aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <osDelay+0x34>
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <osDelay+0x58>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d109      	bne.n	8001b10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001afc:	f3ef 8311 	mrs	r3, BASEPRI
 8001b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <osDelay+0x3c>
    stat = osErrorISR;
 8001b08:	f06f 0305 	mvn.w	r3, #5
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e007      	b.n	8001b20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 ff94 	bl	8002a48 <vTaskDelay>
    }
  }

  return (stat);
 8001b20:	697b      	ldr	r3, [r7, #20]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200000d4 	.word	0x200000d4

08001b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <vApplicationGetIdleTaskMemory+0x28>)
 8001b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	601a      	str	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	200000d8 	.word	0x200000d8
 8001b5c:	20000180 	.word	0x20000180

08001b60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <vApplicationGetTimerTaskMemory+0x2c>)
 8001b70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <vApplicationGetTimerTaskMemory+0x30>)
 8001b76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000380 	.word	0x20000380
 8001b90:	20000428 	.word	0x20000428

08001b94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f103 0208 	add.w	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f103 0208 	add.w	r2, r3, #8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f103 0208 	add.w	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d103      	bne.n	8001c50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e00c      	b.n	8001c6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3308      	adds	r3, #8
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e002      	b.n	8001c5e <vListInsert+0x2e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d2f6      	bcs.n	8001c58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6852      	ldr	r2, [r2, #4]
 8001cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d103      	bne.n	8001cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d20:	f002 f824 	bl	8003d6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	441a      	add	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	3b01      	subs	r3, #1
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	441a      	add	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	22ff      	movs	r2, #255	@ 0xff
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	22ff      	movs	r2, #255	@ 0xff
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d114      	bne.n	8001da0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01a      	beq.n	8001db4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3310      	adds	r3, #16
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f936 	bl	8002ff4 <xTaskRemoveFromEventList>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d012      	beq.n	8001db4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <xQueueGenericReset+0xd0>)
 8001d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	e009      	b.n	8001db4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3310      	adds	r3, #16
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fef5 	bl	8001b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3324      	adds	r3, #36	@ 0x24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fef0 	bl	8001b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001db4:	f002 f80a 	bl	8003dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000ed04 	.word	0xe000ed04

08001dc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10b      	bne.n	8001e12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <xQueueGenericCreateStatic+0x56>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <xQueueGenericCreateStatic+0x5a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <xQueueGenericCreateStatic+0x5c>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2c:	f383 8811 	msr	BASEPRI, r3
 8001e30:	f3bf 8f6f 	isb	sy
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	623b      	str	r3, [r7, #32]
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <xQueueGenericCreateStatic+0x84>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <xQueueGenericCreateStatic+0x88>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <xQueueGenericCreateStatic+0x8a>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10b      	bne.n	8001e6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	61fb      	str	r3, [r7, #28]
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	e7fd      	b.n	8001e6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e6e:	2350      	movs	r3, #80	@ 0x50
 8001e70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b50      	cmp	r3, #80	@ 0x50
 8001e76:	d00b      	beq.n	8001e90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	f3bf 8f4f 	dsb	sy
 8001e88:	61bb      	str	r3, [r7, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ea2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f805 	bl	8001ec0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3730      	adds	r7, #48	@ 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e002      	b.n	8001ee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001eee:	2101      	movs	r1, #1
 8001ef0:	69b8      	ldr	r0, [r7, #24]
 8001ef2:	f7ff feff 	bl	8001cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	@ 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <xQueueGenericSend+0x34>
	__asm volatile
 8001f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <xQueueGenericSend+0x42>
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <xQueueGenericSend+0x46>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <xQueueGenericSend+0x48>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <xQueueGenericSend+0x64>
	__asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d103      	bne.n	8001f7a <xQueueGenericSend+0x72>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <xQueueGenericSend+0x76>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <xQueueGenericSend+0x78>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10b      	bne.n	8001f9c <xQueueGenericSend+0x94>
	__asm volatile
 8001f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	623b      	str	r3, [r7, #32]
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f9c:	f001 f9f4 	bl	8003388 <xTaskGetSchedulerState>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <xQueueGenericSend+0xa4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <xQueueGenericSend+0xa8>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <xQueueGenericSend+0xaa>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <xQueueGenericSend+0xc6>
	__asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	61fb      	str	r3, [r7, #28]
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fce:	f001 fecd 	bl	8003d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <xQueueGenericSend+0xdc>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d129      	bne.n	8002038 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fea:	f000 fa0d 	bl	8002408 <prvCopyDataToQueue>
 8001fee:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffa:	3324      	adds	r3, #36	@ 0x24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fff9 	bl	8002ff4 <xTaskRemoveFromEventList>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002008:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <xQueueGenericSend+0x200>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	e00a      	b.n	8002030 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800201a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002020:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <xQueueGenericSend+0x200>)
 8002022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002030:	f001 fecc 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 8002034:	2301      	movs	r3, #1
 8002036:	e063      	b.n	8002100 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800203e:	f001 fec5 	bl	8003dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002042:	2300      	movs	r3, #0
 8002044:	e05c      	b.n	8002100 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f833 	bl	80030bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002056:	2301      	movs	r3, #1
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800205a:	f001 feb7 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800205e:	f000 fd99 	bl	8002b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002062:	f001 fe83 	bl	8003d6c <vPortEnterCritical>
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800206c:	b25b      	sxtb	r3, r3
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d103      	bne.n	800207c <xQueueGenericSend+0x174>
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002082:	b25b      	sxtb	r3, r3
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d103      	bne.n	8002092 <xQueueGenericSend+0x18a>
 800208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002092:	f001 fe9b 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002096:	1d3a      	adds	r2, r7, #4
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 f822 	bl	80030e8 <xTaskCheckForTimeOut>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d124      	bne.n	80020f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020ac:	f000 faa4 	bl	80025f8 <prvIsQueueFull>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b8:	3310      	adds	r3, #16
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 ff46 	bl	8002f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020c6:	f000 fa2f 	bl	8002528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020ca:	f000 fd71 	bl	8002bb0 <xTaskResumeAll>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f af7c 	bne.w	8001fce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <xQueueGenericSend+0x200>)
 80020d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	e772      	b.n	8001fce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020ea:	f000 fa1d 	bl	8002528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020ee:	f000 fd5f 	bl	8002bb0 <xTaskResumeAll>
 80020f2:	e76c      	b.n	8001fce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020f6:	f000 fa17 	bl	8002528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020fa:	f000 fd59 	bl	8002bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020fe:	2300      	movs	r3, #0
		}
	}
}
 8002100:	4618      	mov	r0, r3
 8002102:	3738      	adds	r7, #56	@ 0x38
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000ed04 	.word	0xe000ed04

0800210c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	@ 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800211e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <xQueueGenericSendFromISR+0x3e>
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <xQueueGenericSendFromISR+0x42>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <xQueueGenericSendFromISR+0x44>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	623b      	str	r3, [r7, #32]
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d103      	bne.n	800217a <xQueueGenericSendFromISR+0x6e>
 8002172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <xQueueGenericSendFromISR+0x72>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <xQueueGenericSendFromISR+0x74>
 800217e:	2300      	movs	r3, #0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	61fb      	str	r3, [r7, #28]
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800219c:	f001 fea8 	bl	8003ef0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021a0:	f3ef 8211 	mrs	r2, BASEPRI
 80021a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	61ba      	str	r2, [r7, #24]
 80021b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d302      	bcc.n	80021ce <xQueueGenericSendFromISR+0xc2>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d12c      	bne.n	8002228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021de:	f000 f913 	bl	8002408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d112      	bne.n	8002212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d016      	beq.n	8002222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	3324      	adds	r3, #36	@ 0x24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fefb 	bl	8002ff4 <xTaskRemoveFromEventList>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002212:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002216:	3301      	adds	r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	b25a      	sxtb	r2, r3
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002222:	2301      	movs	r3, #1
 8002224:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002226:	e001      	b.n	800222c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800223a:	4618      	mov	r0, r3
 800223c:	3738      	adds	r7, #56	@ 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	@ 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <xQueueReceive+0x32>
	__asm volatile
 800225e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002262:	f383 8811 	msr	BASEPRI, r3
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	623b      	str	r3, [r7, #32]
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	e7fd      	b.n	8002272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d103      	bne.n	8002284 <xQueueReceive+0x40>
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <xQueueReceive+0x44>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <xQueueReceive+0x46>
 8002288:	2300      	movs	r3, #0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <xQueueReceive+0x62>
	__asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	61fb      	str	r3, [r7, #28]
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	e7fd      	b.n	80022a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022a6:	f001 f86f 	bl	8003388 <xTaskGetSchedulerState>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <xQueueReceive+0x72>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <xQueueReceive+0x76>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <xQueueReceive+0x78>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <xQueueReceive+0x94>
	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	61bb      	str	r3, [r7, #24]
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022d8:	f001 fd48 	bl	8003d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ec:	f000 f8f6 	bl	80024dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	3310      	adds	r3, #16
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fe75 	bl	8002ff4 <xTaskRemoveFromEventList>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002310:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <xQueueReceive+0x1c0>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002320:	f001 fd54 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 8002324:	2301      	movs	r3, #1
 8002326:	e069      	b.n	80023fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800232e:	f001 fd4d 	bl	8003dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002332:	2300      	movs	r3, #0
 8002334:	e062      	b.n	80023fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f000 febb 	bl	80030bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002346:	2301      	movs	r3, #1
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800234a:	f001 fd3f 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800234e:	f000 fc21 	bl	8002b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002352:	f001 fd0b 	bl	8003d6c <vPortEnterCritical>
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800235c:	b25b      	sxtb	r3, r3
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d103      	bne.n	800236c <xQueueReceive+0x128>
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002372:	b25b      	sxtb	r3, r3
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d103      	bne.n	8002382 <xQueueReceive+0x13e>
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002382:	f001 fd23 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002386:	1d3a      	adds	r2, r7, #4
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 feaa 	bl	80030e8 <xTaskCheckForTimeOut>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d123      	bne.n	80023e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800239a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800239c:	f000 f916 	bl	80025cc <prvIsQueueEmpty>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	3324      	adds	r3, #36	@ 0x24
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fdce 	bl	8002f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023b6:	f000 f8b7 	bl	8002528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023ba:	f000 fbf9 	bl	8002bb0 <xTaskResumeAll>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d189      	bne.n	80022d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <xQueueReceive+0x1c0>)
 80023c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	e780      	b.n	80022d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023d8:	f000 f8a6 	bl	8002528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023dc:	f000 fbe8 	bl	8002bb0 <xTaskResumeAll>
 80023e0:	e77a      	b.n	80022d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023e4:	f000 f8a0 	bl	8002528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023e8:	f000 fbe2 	bl	8002bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023ee:	f000 f8ed 	bl	80025cc <prvIsQueueEmpty>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f43f af6f 	beq.w	80022d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3730      	adds	r7, #48	@ 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d14d      	bne.n	80024ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 ffc6 	bl	80033c4 <xTaskPriorityDisinherit>
 8002438:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	e043      	b.n	80024ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d119      	bne.n	800247c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6898      	ldr	r0, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	f001 ffee 	bl	8004434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	441a      	add	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	d32b      	bcc.n	80024ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	e026      	b.n	80024ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68d8      	ldr	r0, [r3, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	461a      	mov	r2, r3
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	f001 ffd4 	bl	8004434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	425b      	negs	r3, r3
 8002496:	441a      	add	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	425b      	negs	r3, r3
 80024b2:	441a      	add	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d105      	bne.n	80024ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80024d2:	697b      	ldr	r3, [r7, #20]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d018      	beq.n	8002520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	441a      	add	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d303      	bcc.n	8002510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	461a      	mov	r2, r3
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	f001 ff8a 	bl	8004434 <memcpy>
	}
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002530:	f001 fc1c 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800253a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800253c:	e011      	b.n	8002562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3324      	adds	r3, #36	@ 0x24
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fd52 	bl	8002ff4 <xTaskRemoveFromEventList>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002556:	f000 fe2b 	bl	80031b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	3b01      	subs	r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	dce9      	bgt.n	800253e <prvUnlockQueue+0x16>
 800256a:	e000      	b.n	800256e <prvUnlockQueue+0x46>
					break;
 800256c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	22ff      	movs	r2, #255	@ 0xff
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002576:	f001 fc29 	bl	8003dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800257a:	f001 fbf7 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002586:	e011      	b.n	80025ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3310      	adds	r3, #16
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fd2d 	bl	8002ff4 <xTaskRemoveFromEventList>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025a0:	f000 fe06 	bl	80031b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dce9      	bgt.n	8002588 <prvUnlockQueue+0x60>
 80025b4:	e000      	b.n	80025b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80025c0:	f001 fc04 	bl	8003dcc <vPortExitCritical>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025d4:	f001 fbca 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e001      	b.n	80025ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025ea:	f001 fbef 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002600:	f001 fbb4 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260c:	429a      	cmp	r2, r3
 800260e:	d102      	bne.n	8002616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002610:	2301      	movs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e001      	b.n	800261a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800261a:	f001 fbd7 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e014      	b.n	8002662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002638:	4a0e      	ldr	r2, [pc, #56]	@ (8002674 <vQueueAddToRegistry+0x4c>)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002644:	490b      	ldr	r1, [pc, #44]	@ (8002674 <vQueueAddToRegistry+0x4c>)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800264e:	4a09      	ldr	r2, [pc, #36]	@ (8002674 <vQueueAddToRegistry+0x4c>)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800265a:	e006      	b.n	800266a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b07      	cmp	r3, #7
 8002666:	d9e7      	bls.n	8002638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000828 	.word	0x20000828

08002678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002688:	f001 fb70 	bl	8003d6c <vPortEnterCritical>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <vQueueWaitForMessageRestricted+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d103      	bne.n	80026b8 <vQueueWaitForMessageRestricted+0x40>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026b8:	f001 fb88 	bl	8003dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3324      	adds	r3, #36	@ 0x24
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fc65 	bl	8002f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff28 	bl	8002528 <prvUnlockQueue>
	}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	@ 0x38
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <xTaskCreateStatic+0x2c>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	623b      	str	r3, [r7, #32]
}
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	61fb      	str	r3, [r7, #28]
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	e7fd      	b.n	8002726 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800272a:	23a8      	movs	r3, #168	@ 0xa8
 800272c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2ba8      	cmp	r3, #168	@ 0xa8
 8002732:	d00b      	beq.n	800274c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	61bb      	str	r3, [r7, #24]
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01e      	beq.n	8002790 <xTaskCreateStatic+0xb0>
 8002752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	2202      	movs	r2, #2
 8002766:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800276a:	2300      	movs	r3, #0
 800276c:	9303      	str	r3, [sp, #12]
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f850 	bl	8002828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800278a:	f000 f8ed 	bl	8002968 <prvAddNewTaskToReadyList>
 800278e:	e001      	b.n	8002794 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002794:	697b      	ldr	r3, [r7, #20]
	}
 8002796:	4618      	mov	r0, r3
 8002798:	3728      	adds	r7, #40	@ 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b08c      	sub	sp, #48	@ 0x30
 80027a2:	af04      	add	r7, sp, #16
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fbdc 	bl	8003f70 <pvPortMalloc>
 80027b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027c0:	20a8      	movs	r0, #168	@ 0xa8
 80027c2:	f001 fbd5 	bl	8003f70 <pvPortMalloc>
 80027c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027d4:	e005      	b.n	80027e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f001 fc92 	bl	8004100 <vPortFree>
 80027dc:	e001      	b.n	80027e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	2300      	movs	r3, #0
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f80e 	bl	8002828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800280c:	69f8      	ldr	r0, [r7, #28]
 800280e:	f000 f8ab 	bl	8002968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e002      	b.n	800281e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800281e:	69bb      	ldr	r3, [r7, #24]
	}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	461a      	mov	r2, r3
 8002840:	21a5      	movs	r1, #165	@ 0xa5
 8002842:	f001 fd73 	bl	800432c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002850:	3b01      	subs	r3, #1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	617b      	str	r3, [r7, #20]
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e012      	b.n	80028ae <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	7819      	ldrb	r1, [r3, #0]
 8002890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	3334      	adds	r3, #52	@ 0x34
 8002898:	460a      	mov	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d9e9      	bls.n	8002888 <prvInitialiseNewTask+0x60>
 80028b4:	e000      	b.n	80028b8 <prvInitialiseNewTask+0x90>
		{
			break;
 80028b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	2b37      	cmp	r3, #55	@ 0x37
 80028c4:	d901      	bls.n	80028ca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028c6:	2337      	movs	r3, #55	@ 0x37
 80028c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	2200      	movs	r2, #0
 80028da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	3304      	adds	r3, #4
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f976 	bl	8001bd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	3318      	adds	r3, #24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f971 	bl	8001bd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	2200      	movs	r2, #0
 800290a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	3354      	adds	r3, #84	@ 0x54
 800291a:	224c      	movs	r2, #76	@ 0x4c
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fd04 	bl	800432c <memset>
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <prvInitialiseNewTask+0x134>)
 8002928:	659a      	str	r2, [r3, #88]	@ 0x58
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	4a0c      	ldr	r2, [pc, #48]	@ (8002960 <prvInitialiseNewTask+0x138>)
 800292e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002932:	4a0c      	ldr	r2, [pc, #48]	@ (8002964 <prvInitialiseNewTask+0x13c>)
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	69b8      	ldr	r0, [r7, #24]
 800293c:	f001 f926 	bl	8003b8c <pxPortInitialiseStack>
 8002940:	4602      	mov	r2, r0
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20001ab4 	.word	0x20001ab4
 8002960:	20001b1c 	.word	0x20001b1c
 8002964:	20001b84 	.word	0x20001b84

08002968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002970:	f001 f9fc 	bl	8003d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 800297c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800297e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002986:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d110      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002994:	f000 fc30 	bl	80031f8 <prvInitialiseTaskLists>
 8002998:	e00d      	b.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a2:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d802      	bhi.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <prvAddNewTaskToReadyList+0xd0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <prvAddNewTaskToReadyList+0xd0>)
 80029be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <prvAddNewTaskToReadyList+0xd0>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <prvAddNewTaskToReadyList+0xd4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d903      	bls.n	80029dc <prvAddNewTaskToReadyList+0x74>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <prvAddNewTaskToReadyList+0xd4>)
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4a15      	ldr	r2, [pc, #84]	@ (8002a40 <prvAddNewTaskToReadyList+0xd8>)
 80029ea:	441a      	add	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f7ff f8f9 	bl	8001bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029f8:	f001 f9e8 	bl	8003dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d207      	bcs.n	8002a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a12:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <prvAddNewTaskToReadyList+0xdc>)
 8002a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000d3c 	.word	0x20000d3c
 8002a30:	20000868 	.word	0x20000868
 8002a34:	20000d48 	.word	0x20000d48
 8002a38:	20000d58 	.word	0x20000d58
 8002a3c:	20000d44 	.word	0x20000d44
 8002a40:	2000086c 	.word	0x2000086c
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a5a:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <vTaskDelay+0x64>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <vTaskDelay+0x32>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	60bb      	str	r3, [r7, #8]
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a7a:	f000 f88b 	bl	8002b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fd0f 	bl	80034a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a86:	f000 f893 	bl	8002bb0 <xTaskResumeAll>
 8002a8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002a92:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <vTaskDelay+0x68>)
 8002a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000d64 	.word	0x20000d64
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ac2:	463a      	mov	r2, r7
 8002ac4:	1d39      	adds	r1, r7, #4
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f830 	bl	8001b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	4924      	ldr	r1, [pc, #144]	@ (8002b74 <vTaskStartScheduler+0xc0>)
 8002ae4:	4824      	ldr	r0, [pc, #144]	@ (8002b78 <vTaskStartScheduler+0xc4>)
 8002ae6:	f7ff fdfb 	bl	80026e0 <xTaskCreateStatic>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a23      	ldr	r2, [pc, #140]	@ (8002b7c <vTaskStartScheduler+0xc8>)
 8002aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002af0:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <vTaskStartScheduler+0xc8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e001      	b.n	8002b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b08:	f000 fd20 	bl	800354c <xTimerCreateTimerTask>
 8002b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d11b      	bne.n	8002b4c <vTaskStartScheduler+0x98>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	613b      	str	r3, [r7, #16]
}
 8002b26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <vTaskStartScheduler+0xcc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3354      	adds	r3, #84	@ 0x54
 8002b2e:	4a15      	ldr	r2, [pc, #84]	@ (8002b84 <vTaskStartScheduler+0xd0>)
 8002b30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <vTaskStartScheduler+0xd4>)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	@ (8002b8c <vTaskStartScheduler+0xd8>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <vTaskStartScheduler+0xdc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b46:	f001 f89f 	bl	8003c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b4a:	e00f      	b.n	8002b6c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d10b      	bne.n	8002b6c <vTaskStartScheduler+0xb8>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	60fb      	str	r3, [r7, #12]
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <vTaskStartScheduler+0xb4>
}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	08004530 	.word	0x08004530
 8002b78:	080031c9 	.word	0x080031c9
 8002b7c:	20000d60 	.word	0x20000d60
 8002b80:	20000868 	.word	0x20000868
 8002b84:	20000010 	.word	0x20000010
 8002b88:	20000d5c 	.word	0x20000d5c
 8002b8c:	20000d48 	.word	0x20000d48
 8002b90:	20000d40 	.word	0x20000d40

08002b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <vTaskSuspendAll+0x18>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4a03      	ldr	r2, [pc, #12]	@ (8002bac <vTaskSuspendAll+0x18>)
 8002ba0:	6013      	str	r3, [r2, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000d64 	.word	0x20000d64

08002bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bbe:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <xTaskResumeAll+0x2e>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	603b      	str	r3, [r7, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bde:	f001 f8c5 	bl	8003d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	4a37      	ldr	r2, [pc, #220]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d162      	bne.n	8002cba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bf4:	4b35      	ldr	r3, [pc, #212]	@ (8002ccc <xTaskResumeAll+0x11c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05e      	beq.n	8002cba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bfc:	e02f      	b.n	8002c5e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <xTaskResumeAll+0x120>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3318      	adds	r3, #24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f848 	bl	8001ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f843 	bl	8001ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd4 <xTaskResumeAll+0x124>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d903      	bls.n	8002c2e <xTaskResumeAll+0x7e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd4 <xTaskResumeAll+0x124>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <xTaskResumeAll+0x128>)
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7fe ffd0 	bl	8001bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4e:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <xTaskResumeAll+0x12c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <xTaskResumeAll+0x120>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1cb      	bne.n	8002bfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c6c:	f000 fb68 	bl	8003340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce4 <xTaskResumeAll+0x134>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c7c:	f000 f844 	bl	8002d08 <xTaskIncrementTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f1      	bne.n	8002c7c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <xTaskResumeAll+0x134>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <xTaskResumeAll+0x138>)
 8002cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cba:	f001 f887 	bl	8003dcc <vPortExitCritical>

	return xAlreadyYielded;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000d64 	.word	0x20000d64
 8002ccc:	20000d3c 	.word	0x20000d3c
 8002cd0:	20000cfc 	.word	0x20000cfc
 8002cd4:	20000d44 	.word	0x20000d44
 8002cd8:	2000086c 	.word	0x2000086c
 8002cdc:	20000868 	.word	0x20000868
 8002ce0:	20000d50 	.word	0x20000d50
 8002ce4:	20000d4c 	.word	0x20000d4c
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cf2:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <xTaskGetTickCount+0x18>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cf8:	687b      	ldr	r3, [r7, #4]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	20000d40 	.word	0x20000d40

08002d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d12:	4b52      	ldr	r3, [pc, #328]	@ (8002e5c <xTaskIncrementTick+0x154>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 808f 	bne.w	8002e3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d1c:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <xTaskIncrementTick+0x158>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d24:	4a4e      	ldr	r2, [pc, #312]	@ (8002e60 <xTaskIncrementTick+0x158>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d121      	bne.n	8002d74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d30:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <xTaskIncrementTick+0x15c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <xTaskIncrementTick+0x46>
 8002d52:	4b44      	ldr	r3, [pc, #272]	@ (8002e64 <xTaskIncrementTick+0x15c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <xTaskIncrementTick+0x160>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a41      	ldr	r2, [pc, #260]	@ (8002e64 <xTaskIncrementTick+0x15c>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <xTaskIncrementTick+0x160>)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <xTaskIncrementTick+0x164>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e6c <xTaskIncrementTick+0x164>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	f000 fae6 	bl	8003340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d74:	4b3e      	ldr	r3, [pc, #248]	@ (8002e70 <xTaskIncrementTick+0x168>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d34e      	bcc.n	8002e1c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7e:	4b39      	ldr	r3, [pc, #228]	@ (8002e64 <xTaskIncrementTick+0x15c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <xTaskIncrementTick+0x84>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <xTaskIncrementTick+0x86>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d92:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <xTaskIncrementTick+0x168>)
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	601a      	str	r2, [r3, #0]
					break;
 8002d9a:	e03f      	b.n	8002e1c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d9c:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <xTaskIncrementTick+0x15c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d203      	bcs.n	8002dbc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002db4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e70 <xTaskIncrementTick+0x168>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
						break;
 8002dba:	e02f      	b.n	8002e1c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe ff6d 	bl	8001ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe ff64 	bl	8001ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <xTaskIncrementTick+0x16c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d903      	bls.n	8002dec <xTaskIncrementTick+0xe4>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	4a22      	ldr	r2, [pc, #136]	@ (8002e74 <xTaskIncrementTick+0x16c>)
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e78 <xTaskIncrementTick+0x170>)
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f7fe fef1 	bl	8001bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <xTaskIncrementTick+0x174>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d3b3      	bcc.n	8002d7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e1a:	e7b0      	b.n	8002d7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <xTaskIncrementTick+0x174>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	4915      	ldr	r1, [pc, #84]	@ (8002e78 <xTaskIncrementTick+0x170>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d907      	bls.n	8002e44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e004      	b.n	8002e44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <xTaskIncrementTick+0x178>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <xTaskIncrementTick+0x178>)
 8002e42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <xTaskIncrementTick+0x17c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e50:	697b      	ldr	r3, [r7, #20]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000d64 	.word	0x20000d64
 8002e60:	20000d40 	.word	0x20000d40
 8002e64:	20000cf4 	.word	0x20000cf4
 8002e68:	20000cf8 	.word	0x20000cf8
 8002e6c:	20000d54 	.word	0x20000d54
 8002e70:	20000d5c 	.word	0x20000d5c
 8002e74:	20000d44 	.word	0x20000d44
 8002e78:	2000086c 	.word	0x2000086c
 8002e7c:	20000868 	.word	0x20000868
 8002e80:	20000d4c 	.word	0x20000d4c
 8002e84:	20000d50 	.word	0x20000d50

08002e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <vTaskSwitchContext+0xb0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e96:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <vTaskSwitchContext+0xb4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e9c:	e047      	b.n	8002f2e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002e9e:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <vTaskSwitchContext+0xb4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ea4:	4b26      	ldr	r3, [pc, #152]	@ (8002f40 <vTaskSwitchContext+0xb8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e011      	b.n	8002ed0 <vTaskSwitchContext+0x48>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <vTaskSwitchContext+0x42>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	607b      	str	r3, [r7, #4]
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <vTaskSwitchContext+0x3e>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	491c      	ldr	r1, [pc, #112]	@ (8002f44 <vTaskSwitchContext+0xbc>)
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e3      	beq.n	8002eac <vTaskSwitchContext+0x24>
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <vTaskSwitchContext+0xbc>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3308      	adds	r3, #8
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d104      	bne.n	8002f14 <vTaskSwitchContext+0x8c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <vTaskSwitchContext+0xc0>)
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <vTaskSwitchContext+0xb8>)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <vTaskSwitchContext+0xc0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3354      	adds	r3, #84	@ 0x54
 8002f2a:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <vTaskSwitchContext+0xc4>)
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000d64 	.word	0x20000d64
 8002f3c:	20000d50 	.word	0x20000d50
 8002f40:	20000d44 	.word	0x20000d44
 8002f44:	2000086c 	.word	0x2000086c
 8002f48:	20000868 	.word	0x20000868
 8002f4c:	20000010 	.word	0x20000010

08002f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60fb      	str	r3, [r7, #12]
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f78:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <vTaskPlaceOnEventList+0x48>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fe fe55 	bl	8001c30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f86:	2101      	movs	r1, #1
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f000 fa8b 	bl	80034a4 <prvAddCurrentTaskToDelayedList>
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000868 	.word	0x20000868

08002f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	617b      	str	r3, [r7, #20]
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <vTaskPlaceOnEventListRestricted+0x54>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7fe fe0b 	bl	8001bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f000 fa5e 	bl	80034a4 <prvAddCurrentTaskToDelayedList>
	}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000868 	.word	0x20000868

08002ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	60fb      	str	r3, [r7, #12]
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	e7fd      	b.n	800301e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3318      	adds	r3, #24
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fe3a 	bl	8001ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <xTaskRemoveFromEventList+0xb0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11d      	bne.n	8003070 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3304      	adds	r3, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fe31 	bl	8001ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003042:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <xTaskRemoveFromEventList+0xb4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d903      	bls.n	8003052 <xTaskRemoveFromEventList+0x5e>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <xTaskRemoveFromEventList+0xb4>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <xTaskRemoveFromEventList+0xb8>)
 8003060:	441a      	add	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fe fdbe 	bl	8001bea <vListInsertEnd>
 800306e:	e005      	b.n	800307c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3318      	adds	r3, #24
 8003074:	4619      	mov	r1, r3
 8003076:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <xTaskRemoveFromEventList+0xbc>)
 8003078:	f7fe fdb7 	bl	8001bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <xTaskRemoveFromEventList+0xc0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	429a      	cmp	r2, r3
 8003088:	d905      	bls.n	8003096 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800308a:	2301      	movs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <xTaskRemoveFromEventList+0xc4>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e001      	b.n	800309a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800309a:	697b      	ldr	r3, [r7, #20]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000d64 	.word	0x20000d64
 80030a8:	20000d44 	.word	0x20000d44
 80030ac:	2000086c 	.word	0x2000086c
 80030b0:	20000cfc 	.word	0x20000cfc
 80030b4:	20000868 	.word	0x20000868
 80030b8:	20000d50 	.word	0x20000d50

080030bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <vTaskInternalSetTimeOutState+0x24>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <vTaskInternalSetTimeOutState+0x28>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000d54 	.word	0x20000d54
 80030e4:	20000d40 	.word	0x20000d40

080030e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	613b      	str	r3, [r7, #16]
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60fb      	str	r3, [r7, #12]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800312e:	f000 fe1d 	bl	8003d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <xTaskCheckForTimeOut+0xc0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e023      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <xTaskCheckForTimeOut+0xc4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d007      	beq.n	800316e <xTaskCheckForTimeOut+0x86>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e015      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	d20b      	bcs.n	8003190 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff99 	bl	80030bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e004      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800319a:	f000 fe17 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 800319e:	69fb      	ldr	r3, [r7, #28]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000d40 	.word	0x20000d40
 80031ac:	20000d54 	.word	0x20000d54

080031b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031b4:	4b03      	ldr	r3, [pc, #12]	@ (80031c4 <vTaskMissedYield+0x14>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000d50 	.word	0x20000d50

080031c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031d0:	f000 f852 	bl	8003278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <prvIdleTask+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d9f9      	bls.n	80031d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <prvIdleTask+0x2c>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031ec:	e7f0      	b.n	80031d0 <prvIdleTask+0x8>
 80031ee:	bf00      	nop
 80031f0:	2000086c 	.word	0x2000086c
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e00c      	b.n	800321e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <prvInitialiseTaskLists+0x60>)
 8003210:	4413      	add	r3, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fcbe 	bl	8001b94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b37      	cmp	r3, #55	@ 0x37
 8003222:	d9ef      	bls.n	8003204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003224:	480d      	ldr	r0, [pc, #52]	@ (800325c <prvInitialiseTaskLists+0x64>)
 8003226:	f7fe fcb5 	bl	8001b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800322a:	480d      	ldr	r0, [pc, #52]	@ (8003260 <prvInitialiseTaskLists+0x68>)
 800322c:	f7fe fcb2 	bl	8001b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003230:	480c      	ldr	r0, [pc, #48]	@ (8003264 <prvInitialiseTaskLists+0x6c>)
 8003232:	f7fe fcaf 	bl	8001b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003236:	480c      	ldr	r0, [pc, #48]	@ (8003268 <prvInitialiseTaskLists+0x70>)
 8003238:	f7fe fcac 	bl	8001b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800323c:	480b      	ldr	r0, [pc, #44]	@ (800326c <prvInitialiseTaskLists+0x74>)
 800323e:	f7fe fca9 	bl	8001b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <prvInitialiseTaskLists+0x78>)
 8003244:	4a05      	ldr	r2, [pc, #20]	@ (800325c <prvInitialiseTaskLists+0x64>)
 8003246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <prvInitialiseTaskLists+0x7c>)
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <prvInitialiseTaskLists+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2000086c 	.word	0x2000086c
 800325c:	20000ccc 	.word	0x20000ccc
 8003260:	20000ce0 	.word	0x20000ce0
 8003264:	20000cfc 	.word	0x20000cfc
 8003268:	20000d10 	.word	0x20000d10
 800326c:	20000d28 	.word	0x20000d28
 8003270:	20000cf4 	.word	0x20000cf4
 8003274:	20000cf8 	.word	0x20000cf8

08003278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800327e:	e019      	b.n	80032b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003280:	f000 fd74 	bl	8003d6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003284:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <prvCheckTasksWaitingTermination+0x50>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fd05 	bl	8001ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <prvCheckTasksWaitingTermination+0x54>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a0b      	ldr	r2, [pc, #44]	@ (80032cc <prvCheckTasksWaitingTermination+0x54>)
 800329e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032aa:	f000 fd8f 	bl	8003dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f810 	bl	80032d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e1      	bne.n	8003280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000d10 	.word	0x20000d10
 80032cc:	20000d3c 	.word	0x20000d3c
 80032d0:	20000d24 	.word	0x20000d24

080032d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3354      	adds	r3, #84	@ 0x54
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f82b 	bl	800433c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 ff03 	bl	8004100 <vPortFree>
				vPortFree( pxTCB );
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 ff00 	bl	8004100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003300:	e019      	b.n	8003336 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003308:	2b01      	cmp	r3, #1
 800330a:	d103      	bne.n	8003314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fef7 	bl	8004100 <vPortFree>
	}
 8003312:	e010      	b.n	8003336 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800331a:	2b02      	cmp	r3, #2
 800331c:	d00b      	beq.n	8003336 <prvDeleteTCB+0x62>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <prvDeleteTCB+0x5e>
	}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003346:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <prvResetNextTaskUnblockTime+0x40>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <prvResetNextTaskUnblockTime+0x14>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <prvResetNextTaskUnblockTime+0x16>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <prvResetNextTaskUnblockTime+0x44>)
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003362:	e008      	b.n	8003376 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <prvResetNextTaskUnblockTime+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <prvResetNextTaskUnblockTime+0x44>)
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20000cf4 	.word	0x20000cf4
 8003384:	20000d5c 	.word	0x20000d5c

08003388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800338e:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <xTaskGetSchedulerState+0x34>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003396:	2301      	movs	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	e008      	b.n	80033ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <xTaskGetSchedulerState+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033a4:	2302      	movs	r3, #2
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e001      	b.n	80033ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033ae:	687b      	ldr	r3, [r7, #4]
	}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000d48 	.word	0x20000d48
 80033c0:	20000d64 	.word	0x20000d64

080033c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d058      	beq.n	800348c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033da:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <xTaskPriorityDisinherit+0xd4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d00b      	beq.n	80033fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60bb      	str	r3, [r7, #8]
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	429a      	cmp	r2, r3
 8003430:	d02c      	beq.n	800348c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d128      	bne.n	800348c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	3304      	adds	r3, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fc2e 	bl	8001ca0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <xTaskPriorityDisinherit+0xd8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d903      	bls.n	800346c <xTaskPriorityDisinherit+0xa8>
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <xTaskPriorityDisinherit+0xd8>)
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <xTaskPriorityDisinherit+0xdc>)
 800347a:	441a      	add	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7fe fbb1 	bl	8001bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800348c:	697b      	ldr	r3, [r7, #20]
	}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000868 	.word	0x20000868
 800349c:	20000d44 	.word	0x20000d44
 80034a0:	2000086c 	.word	0x2000086c

080034a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <prvAddCurrentTaskToDelayedList+0x90>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b4:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <prvAddCurrentTaskToDelayedList+0x94>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fbf0 	bl	8001ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d10a      	bne.n	80034de <prvAddCurrentTaskToDelayedList+0x3a>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <prvAddCurrentTaskToDelayedList+0x94>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4819      	ldr	r0, [pc, #100]	@ (800353c <prvAddCurrentTaskToDelayedList+0x98>)
 80034d8:	f7fe fb87 	bl	8001bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034dc:	e026      	b.n	800352c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034e6:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <prvAddCurrentTaskToDelayedList+0x94>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d209      	bcs.n	800350a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <prvAddCurrentTaskToDelayedList+0x9c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <prvAddCurrentTaskToDelayedList+0x94>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3304      	adds	r3, #4
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7fe fb94 	bl	8001c30 <vListInsert>
}
 8003508:	e010      	b.n	800352c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <prvAddCurrentTaskToDelayedList+0x94>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7fe fb8a 	bl	8001c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d202      	bcs.n	800352c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000d40 	.word	0x20000d40
 8003538:	20000868 	.word	0x20000868
 800353c:	20000d28 	.word	0x20000d28
 8003540:	20000cf8 	.word	0x20000cf8
 8003544:	20000cf4 	.word	0x20000cf4
 8003548:	20000d5c 	.word	0x20000d5c

0800354c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	@ 0x28
 8003550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003556:	f000 fad9 	bl	8003b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800355a:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <xTimerCreateTimerTask+0x84>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d021      	beq.n	80035a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800356a:	1d3a      	adds	r2, r7, #4
 800356c:	f107 0108 	add.w	r1, r7, #8
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe faf3 	bl	8001b60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	9202      	str	r2, [sp, #8]
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2302      	movs	r3, #2
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	460a      	mov	r2, r1
 800358c:	4911      	ldr	r1, [pc, #68]	@ (80035d4 <xTimerCreateTimerTask+0x88>)
 800358e:	4812      	ldr	r0, [pc, #72]	@ (80035d8 <xTimerCreateTimerTask+0x8c>)
 8003590:	f7ff f8a6 	bl	80026e0 <xTaskCreateStatic>
 8003594:	4603      	mov	r3, r0
 8003596:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <xTimerCreateTimerTask+0x90>)
 8003598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <xTimerCreateTimerTask+0x90>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80035a2:	2301      	movs	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	613b      	str	r3, [r7, #16]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80035c4:	697b      	ldr	r3, [r7, #20]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000d98 	.word	0x20000d98
 80035d4:	08004538 	.word	0x08004538
 80035d8:	08003701 	.word	0x08003701
 80035dc:	20000d9c 	.word	0x20000d9c

080035e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	@ 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <xTimerGenericCommand+0x30>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	623b      	str	r3, [r7, #32]
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <xTimerGenericCommand+0x98>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02a      	beq.n	800366e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b05      	cmp	r3, #5
 8003628:	dc18      	bgt.n	800365c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800362a:	f7ff fead 	bl	8003388 <xTaskGetSchedulerState>
 800362e:	4603      	mov	r3, r0
 8003630:	2b02      	cmp	r3, #2
 8003632:	d109      	bne.n	8003648 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <xTimerGenericCommand+0x98>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	f107 0110 	add.w	r1, r7, #16
 800363c:	2300      	movs	r3, #0
 800363e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003640:	f7fe fc62 	bl	8001f08 <xQueueGenericSend>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24
 8003646:	e012      	b.n	800366e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <xTimerGenericCommand+0x98>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f107 0110 	add.w	r1, r7, #16
 8003650:	2300      	movs	r3, #0
 8003652:	2200      	movs	r2, #0
 8003654:	f7fe fc58 	bl	8001f08 <xQueueGenericSend>
 8003658:	6278      	str	r0, [r7, #36]	@ 0x24
 800365a:	e008      	b.n	800366e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <xTimerGenericCommand+0x98>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	f107 0110 	add.w	r1, r7, #16
 8003664:	2300      	movs	r3, #0
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	f7fe fd50 	bl	800210c <xQueueGenericSendFromISR>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	@ 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000d98 	.word	0x20000d98

0800367c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003686:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <prvProcessExpiredTimer+0x80>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fb03 	bl	8001ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d123      	bne.n	80036ea <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	18d1      	adds	r1, r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f000 f8cc 	bl	800384c <prvInsertTimerInActiveList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d017      	beq.n	80036ea <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	2100      	movs	r1, #0
 80036c4:	6978      	ldr	r0, [r7, #20]
 80036c6:	f7ff ff8b 	bl	80035e0 <xTimerGenericCommand>
 80036ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	4798      	blx	r3
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000d90 	.word	0x20000d90

08003700 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f859 	bl	80037c4 <prvGetNextExpireTime>
 8003712:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4619      	mov	r1, r3
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f805 	bl	8003728 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800371e:	f000 f8d7 	bl	80038d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003722:	bf00      	nop
 8003724:	e7f0      	b.n	8003708 <prvTimerTask+0x8>
	...

08003728 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003732:	f7ff fa2f 	bl	8002b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f866 	bl	800380c <prvSampleTimeNow>
 8003740:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d130      	bne.n	80037aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <prvProcessTimerOrBlockTask+0x3c>
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	429a      	cmp	r2, r3
 8003754:	d806      	bhi.n	8003764 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003756:	f7ff fa2b 	bl	8002bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff8d 	bl	800367c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003762:	e024      	b.n	80037ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800376a:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <prvProcessTimerOrBlockTask+0x90>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <prvProcessTimerOrBlockTask+0x94>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f7fe ff75 	bl	8002678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800378e:	f7ff fa0f 	bl	8002bb0 <xTaskResumeAll>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <prvProcessTimerOrBlockTask+0x98>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
}
 80037a8:	e001      	b.n	80037ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037aa:	f7ff fa01 	bl	8002bb0 <xTaskResumeAll>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000d94 	.word	0x20000d94
 80037bc:	20000d98 	.word	0x20000d98
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <prvGetNextExpireTime+0x44>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <prvGetNextExpireTime+0x44>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e001      	b.n	80037fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000d90 	.word	0x20000d90

0800380c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003814:	f7ff fa6a 	bl	8002cec <xTaskGetTickCount>
 8003818:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <prvSampleTimeNow+0x3c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d205      	bcs.n	8003830 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003824:	f000 f910 	bl	8003a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e002      	b.n	8003836 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003836:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <prvSampleTimeNow+0x3c>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000da0 	.word	0x20000da0

0800384c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d812      	bhi.n	8003898 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad2      	subs	r2, r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e01b      	b.n	80038be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003886:	4b10      	ldr	r3, [pc, #64]	@ (80038c8 <prvInsertTimerInActiveList+0x7c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe f9cd 	bl	8001c30 <vListInsert>
 8003896:	e012      	b.n	80038be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d206      	bcs.n	80038ae <prvInsertTimerInActiveList+0x62>
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e007      	b.n	80038be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <prvInsertTimerInActiveList+0x80>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe f9b9 	bl	8001c30 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038be:	697b      	ldr	r3, [r7, #20]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000d94 	.word	0x20000d94
 80038cc:	20000d90 	.word	0x20000d90

080038d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	@ 0x38
 80038d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038d6:	e0a5      	b.n	8003a24 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da19      	bge.n	8003912 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	3304      	adds	r3, #4
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	61fb      	str	r3, [r7, #28]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003908:	6850      	ldr	r0, [r2, #4]
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	4611      	mov	r1, r2
 8003910:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f2c0 8085 	blt.w	8003a24 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe f9b8 	bl	8001ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003930:	463b      	mov	r3, r7
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff6a 	bl	800380c <prvSampleTimeNow>
 8003938:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d86c      	bhi.n	8003a1a <prvProcessReceivedCommands+0x14a>
 8003940:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <prvProcessReceivedCommands+0x78>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003971 	.word	0x08003971
 800394c:	08003971 	.word	0x08003971
 8003950:	08003971 	.word	0x08003971
 8003954:	08003a1b 	.word	0x08003a1b
 8003958:	080039cf 	.word	0x080039cf
 800395c:	08003a09 	.word	0x08003a09
 8003960:	08003971 	.word	0x08003971
 8003964:	08003971 	.word	0x08003971
 8003968:	08003a1b 	.word	0x08003a1b
 800396c:	080039cf 	.word	0x080039cf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	18d1      	adds	r1, r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800397e:	f7ff ff65 	bl	800384c <prvInsertTimerInActiveList>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d04a      	beq.n	8003a1e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800398e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d142      	bne.n	8003a1e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	441a      	add	r2, r3
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	2100      	movs	r1, #0
 80039a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039aa:	f7ff fe19 	bl	80035e0 <xTimerGenericCommand>
 80039ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d133      	bne.n	8003a1e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61bb      	str	r3, [r7, #24]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	617b      	str	r3, [r7, #20]
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	18d1      	adds	r1, r2, r3
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a02:	f7ff ff23 	bl	800384c <prvInsertTimerInActiveList>
					break;
 8003a06:	e00d      	b.n	8003a24 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a14:	f000 fb74 	bl	8004100 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a18:	e003      	b.n	8003a22 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <prvProcessReceivedCommands+0x154>
					break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <prvProcessReceivedCommands+0x154>
					break;
 8003a22:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a24:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <prvProcessReceivedCommands+0x174>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1d39      	adds	r1, r7, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fc09 	bl	8002244 <xQueueReceive>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af4f 	bne.w	80038d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3730      	adds	r7, #48	@ 0x30
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000d98 	.word	0x20000d98

08003a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a4e:	e046      	b.n	8003ade <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe f919 	bl	8001ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d12f      	bne.n	8003ade <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d90e      	bls.n	8003aae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7fe f8c2 	bl	8001c30 <vListInsert>
 8003aac:	e017      	b.n	8003ade <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fd91 	bl	80035e0 <xTimerGenericCommand>
 8003abe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <prvSwitchTimerLists+0x96>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	603b      	str	r3, [r7, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1b3      	bne.n	8003a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <prvSwitchTimerLists+0xc0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <prvSwitchTimerLists+0xbc>)
 8003af4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003af6:	4a04      	ldr	r2, [pc, #16]	@ (8003b08 <prvSwitchTimerLists+0xc0>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000d90 	.word	0x20000d90
 8003b08:	20000d94 	.word	0x20000d94

08003b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b12:	f000 f92b 	bl	8003d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <prvCheckForValidListAndQueue+0x60>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d120      	bne.n	8003b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b1e:	4814      	ldr	r0, [pc, #80]	@ (8003b70 <prvCheckForValidListAndQueue+0x64>)
 8003b20:	f7fe f838 	bl	8001b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b24:	4813      	ldr	r0, [pc, #76]	@ (8003b74 <prvCheckForValidListAndQueue+0x68>)
 8003b26:	f7fe f835 	bl	8001b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <prvCheckForValidListAndQueue+0x6c>)
 8003b2c:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <prvCheckForValidListAndQueue+0x64>)
 8003b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b30:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <prvCheckForValidListAndQueue+0x70>)
 8003b32:	4a10      	ldr	r2, [pc, #64]	@ (8003b74 <prvCheckForValidListAndQueue+0x68>)
 8003b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <prvCheckForValidListAndQueue+0x74>)
 8003b3c:	4a11      	ldr	r2, [pc, #68]	@ (8003b84 <prvCheckForValidListAndQueue+0x78>)
 8003b3e:	2110      	movs	r1, #16
 8003b40:	200a      	movs	r0, #10
 8003b42:	f7fe f941 	bl	8001dc8 <xQueueGenericCreateStatic>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <prvCheckForValidListAndQueue+0x60>)
 8003b4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <prvCheckForValidListAndQueue+0x60>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <prvCheckForValidListAndQueue+0x60>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	490b      	ldr	r1, [pc, #44]	@ (8003b88 <prvCheckForValidListAndQueue+0x7c>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fd64 	bl	8002628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b60:	f000 f934 	bl	8003dcc <vPortExitCritical>
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000d98 	.word	0x20000d98
 8003b70:	20000d68 	.word	0x20000d68
 8003b74:	20000d7c 	.word	0x20000d7c
 8003b78:	20000d90 	.word	0x20000d90
 8003b7c:	20000d94 	.word	0x20000d94
 8003b80:	20000e44 	.word	0x20000e44
 8003b84:	20000da4 	.word	0x20000da4
 8003b88:	08004540 	.word	0x08004540

08003b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b04      	subs	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b04      	subs	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bbc:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <pxPortInitialiseStack+0x54>)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b14      	subs	r3, #20
 8003bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b20      	subs	r3, #32
 8003bd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	08003be5 	.word	0x08003be5

08003be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bee:	4b12      	ldr	r3, [pc, #72]	@ (8003c38 <prvTaskExitError+0x54>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d00b      	beq.n	8003c10 <prvTaskExitError+0x2c>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <prvTaskExitError+0x28>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60bb      	str	r3, [r7, #8]
}
 8003c22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c24:	bf00      	nop
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0fc      	beq.n	8003c26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	00000000 	.word	0x00000000

08003c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c40:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <pxCurrentTCBConst2>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c4a:	f380 8809 	msr	PSP, r0
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c5e:	4770      	bx	lr

08003c60 <pxCurrentTCBConst2>:
 8003c60:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c68:	4806      	ldr	r0, [pc, #24]	@ (8003c84 <prvPortStartFirstTask+0x1c>)
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f380 8808 	msr	MSP, r0
 8003c72:	b662      	cpsie	i
 8003c74:	b661      	cpsie	f
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	df00      	svc	0
 8003c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c82:	bf00      	nop
 8003c84:	e000ed08 	.word	0xe000ed08

08003c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c8e:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <xPortStartScheduler+0xd0>)
 8003c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22ff      	movs	r2, #255	@ 0xff
 8003c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d5c <xPortStartScheduler+0xd4>)
 8003cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003cb8:	2207      	movs	r2, #7
 8003cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cbc:	e009      	b.n	8003cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	4a26      	ldr	r2, [pc, #152]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	d0ef      	beq.n	8003cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00b      	beq.n	8003d02 <xPortStartScheduler+0x7a>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d0c:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d14:	4a12      	ldr	r2, [pc, #72]	@ (8003d60 <xPortStartScheduler+0xd8>)
 8003d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d20:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <xPortStartScheduler+0xdc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0f      	ldr	r2, [pc, #60]	@ (8003d64 <xPortStartScheduler+0xdc>)
 8003d26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <xPortStartScheduler+0xdc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <xPortStartScheduler+0xdc>)
 8003d32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d38:	f000 f8b8 	bl	8003eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <xPortStartScheduler+0xe0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d42:	f7ff ff91 	bl	8003c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d46:	f7ff f89f 	bl	8002e88 <vTaskSwitchContext>
	prvTaskExitError();
 8003d4a:	f7ff ff4b 	bl	8003be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000e400 	.word	0xe000e400
 8003d5c:	20000e94 	.word	0x20000e94
 8003d60:	20000e98 	.word	0x20000e98
 8003d64:	e000ed20 	.word	0xe000ed20
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	607b      	str	r3, [r7, #4]
}
 8003d84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d86:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <vPortEnterCritical+0x58>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc4 <vPortEnterCritical+0x58>)
 8003d8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <vPortEnterCritical+0x58>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d110      	bne.n	8003dba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <vPortEnterCritical+0x5c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <vPortEnterCritical+0x4e>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <vPortEnterCritical+0x4a>
	}
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <vPortExitCritical+0x26>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <vPortExitCritical+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dfc:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <vPortExitCritical+0x44>
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
}
 8003e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e20:	f3ef 8009 	mrs	r0, PSP
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <pxCurrentTCBConst>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e30:	6010      	str	r0, [r2, #0]
 8003e32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e3a:	f380 8811 	msr	BASEPRI, r0
 8003e3e:	f7ff f823 	bl	8002e88 <vTaskSwitchContext>
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	6808      	ldr	r0, [r1, #0]
 8003e52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e56:	f380 8809 	msr	PSP, r0
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	4770      	bx	lr

08003e60 <pxCurrentTCBConst>:
 8003e60:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop

08003e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
}
 8003e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e82:	f7fe ff41 	bl	8002d08 <xTaskIncrementTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <SysTick_Handler+0x40>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f383 8811 	msr	BASEPRI, r3
}
 8003e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <vPortSetupTimerInterrupt+0x30>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ebc:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <vPortSetupTimerInterrupt+0x38>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <vPortSetupTimerInterrupt+0x3c>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <vPortSetupTimerInterrupt+0x40>)
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ece:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <vPortSetupTimerInterrupt+0x30>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	e000e010 	.word	0xe000e010
 8003ee0:	e000e018 	.word	0xe000e018
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	10624dd3 	.word	0x10624dd3
 8003eec:	e000e014 	.word	0xe000e014

08003ef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ef6:	f3ef 8305 	mrs	r3, IPSR
 8003efa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d915      	bls.n	8003f2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f02:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <vPortValidateInterruptPriority+0x70>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f0c:	4b15      	ldr	r3, [pc, #84]	@ (8003f64 <vPortValidateInterruptPriority+0x74>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	7afa      	ldrb	r2, [r7, #11]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20b      	bcs.n	8003f2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	607b      	str	r3, [r7, #4]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <vPortValidateInterruptPriority+0x78>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <vPortValidateInterruptPriority+0x7c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90b      	bls.n	8003f56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	603b      	str	r3, [r7, #0]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <vPortValidateInterruptPriority+0x62>
	}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	e000e3f0 	.word	0xe000e3f0
 8003f64:	20000e94 	.word	0x20000e94
 8003f68:	e000ed0c 	.word	0xe000ed0c
 8003f6c:	20000e98 	.word	0x20000e98

08003f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f7c:	f7fe fe0a 	bl	8002b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f80:	4b5a      	ldr	r3, [pc, #360]	@ (80040ec <pvPortMalloc+0x17c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f88:	f000 f916 	bl	80041b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f8c:	4b58      	ldr	r3, [pc, #352]	@ (80040f0 <pvPortMalloc+0x180>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8090 	bne.w	80040ba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01e      	beq.n	8003fde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d015      	beq.n	8003fde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <pvPortMalloc+0x6e>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	617b      	str	r3, [r7, #20]
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	e7fd      	b.n	8003fda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d06a      	beq.n	80040ba <pvPortMalloc+0x14a>
 8003fe4:	4b43      	ldr	r3, [pc, #268]	@ (80040f4 <pvPortMalloc+0x184>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d865      	bhi.n	80040ba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fee:	4b42      	ldr	r3, [pc, #264]	@ (80040f8 <pvPortMalloc+0x188>)
 8003ff0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ff2:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <pvPortMalloc+0x188>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff8:	e004      	b.n	8004004 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <pvPortMalloc+0xa6>
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f1      	bne.n	8003ffa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004016:	4b35      	ldr	r3, [pc, #212]	@ (80040ec <pvPortMalloc+0x17c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	429a      	cmp	r2, r3
 800401e:	d04c      	beq.n	80040ba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	4413      	add	r3, r2
 8004028:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	2308      	movs	r3, #8
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	429a      	cmp	r2, r3
 8004040:	d920      	bls.n	8004084 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <pvPortMalloc+0xfc>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800407e:	69b8      	ldr	r0, [r7, #24]
 8004080:	f000 f8fc 	bl	800427c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <pvPortMalloc+0x184>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	4a19      	ldr	r2, [pc, #100]	@ (80040f4 <pvPortMalloc+0x184>)
 8004090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004092:	4b18      	ldr	r3, [pc, #96]	@ (80040f4 <pvPortMalloc+0x184>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <pvPortMalloc+0x18c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d203      	bcs.n	80040a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <pvPortMalloc+0x184>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <pvPortMalloc+0x18c>)
 80040a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <pvPortMalloc+0x180>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040ba:	f7fe fd79 	bl	8002bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <pvPortMalloc+0x170>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	60fb      	str	r3, [r7, #12]
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <pvPortMalloc+0x16c>
	return pvReturn;
 80040e0:	69fb      	ldr	r3, [r7, #28]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3728      	adds	r7, #40	@ 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20001aa4 	.word	0x20001aa4
 80040f0:	20001ab0 	.word	0x20001ab0
 80040f4:	20001aa8 	.word	0x20001aa8
 80040f8:	20001a9c 	.word	0x20001a9c
 80040fc:	20001aac 	.word	0x20001aac

08004100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04a      	beq.n	80041a8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004112:	2308      	movs	r3, #8
 8004114:	425b      	negs	r3, r3
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4413      	add	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <vPortFree+0xb0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <vPortFree+0x46>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	60fb      	str	r3, [r7, #12]
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	e7fd      	b.n	8004142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <vPortFree+0x66>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60bb      	str	r3, [r7, #8]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <vPortFree+0xb0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d019      	beq.n	80041a8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d115      	bne.n	80041a8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <vPortFree+0xb0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800418c:	f7fe fd02 	bl	8002b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <vPortFree+0xb4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4413      	add	r3, r2
 800419a:	4a06      	ldr	r2, [pc, #24]	@ (80041b4 <vPortFree+0xb4>)
 800419c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800419e:	6938      	ldr	r0, [r7, #16]
 80041a0:	f000 f86c 	bl	800427c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80041a4:	f7fe fd04 	bl	8002bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20001ab0 	.word	0x20001ab0
 80041b4:	20001aa8 	.word	0x20001aa8

080041b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041c4:	4b27      	ldr	r3, [pc, #156]	@ (8004264 <prvHeapInit+0xac>)
 80041c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3307      	adds	r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004264 <prvHeapInit+0xac>)
 80041e8:	4413      	add	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <prvHeapInit+0xb0>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004268 <prvHeapInit+0xb0>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004204:	2208      	movs	r2, #8
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0307 	bic.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <prvHeapInit+0xb4>)
 8004218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <prvHeapInit+0xb4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004222:	4b12      	ldr	r3, [pc, #72]	@ (800426c <prvHeapInit+0xb4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <prvHeapInit+0xb4>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <prvHeapInit+0xb8>)
 8004246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a09      	ldr	r2, [pc, #36]	@ (8004274 <prvHeapInit+0xbc>)
 800424e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004250:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <prvHeapInit+0xc0>)
 8004252:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000e9c 	.word	0x20000e9c
 8004268:	20001a9c 	.word	0x20001a9c
 800426c:	20001aa4 	.word	0x20001aa4
 8004270:	20001aac 	.word	0x20001aac
 8004274:	20001aa8 	.word	0x20001aa8
 8004278:	20001ab0 	.word	0x20001ab0

0800427c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004284:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <prvInsertBlockIntoFreeList+0xa8>)
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e002      	b.n	8004290 <prvInsertBlockIntoFreeList+0x14>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d8f7      	bhi.n	800428a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	4413      	add	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d108      	bne.n	80042be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	441a      	add	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d118      	bne.n	8004304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <prvInsertBlockIntoFreeList+0xac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d00d      	beq.n	80042fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e008      	b.n	800430c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <prvInsertBlockIntoFreeList+0xac>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e003      	b.n	800430c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d002      	beq.n	800431a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20001a9c 	.word	0x20001a9c
 8004328:	20001aa4 	.word	0x20001aa4

0800432c <memset>:
 800432c:	4603      	mov	r3, r0
 800432e:	4402      	add	r2, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <_reclaim_reent>:
 800433c:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <_reclaim_reent+0xa8>)
 800433e:	b570      	push	{r4, r5, r6, lr}
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4604      	mov	r4, r0
 8004344:	4283      	cmp	r3, r0
 8004346:	d04b      	beq.n	80043e0 <_reclaim_reent+0xa4>
 8004348:	69c3      	ldr	r3, [r0, #28]
 800434a:	b1ab      	cbz	r3, 8004378 <_reclaim_reent+0x3c>
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	b16b      	cbz	r3, 800436c <_reclaim_reent+0x30>
 8004350:	2500      	movs	r5, #0
 8004352:	69e3      	ldr	r3, [r4, #28]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	5959      	ldr	r1, [r3, r5]
 8004358:	2900      	cmp	r1, #0
 800435a:	d13b      	bne.n	80043d4 <_reclaim_reent+0x98>
 800435c:	3504      	adds	r5, #4
 800435e:	2d80      	cmp	r5, #128	@ 0x80
 8004360:	d1f7      	bne.n	8004352 <_reclaim_reent+0x16>
 8004362:	69e3      	ldr	r3, [r4, #28]
 8004364:	4620      	mov	r0, r4
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	f000 f872 	bl	8004450 <_free_r>
 800436c:	69e3      	ldr	r3, [r4, #28]
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	b111      	cbz	r1, 8004378 <_reclaim_reent+0x3c>
 8004372:	4620      	mov	r0, r4
 8004374:	f000 f86c 	bl	8004450 <_free_r>
 8004378:	6961      	ldr	r1, [r4, #20]
 800437a:	b111      	cbz	r1, 8004382 <_reclaim_reent+0x46>
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f867 	bl	8004450 <_free_r>
 8004382:	69e1      	ldr	r1, [r4, #28]
 8004384:	b111      	cbz	r1, 800438c <_reclaim_reent+0x50>
 8004386:	4620      	mov	r0, r4
 8004388:	f000 f862 	bl	8004450 <_free_r>
 800438c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800438e:	b111      	cbz	r1, 8004396 <_reclaim_reent+0x5a>
 8004390:	4620      	mov	r0, r4
 8004392:	f000 f85d 	bl	8004450 <_free_r>
 8004396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004398:	b111      	cbz	r1, 80043a0 <_reclaim_reent+0x64>
 800439a:	4620      	mov	r0, r4
 800439c:	f000 f858 	bl	8004450 <_free_r>
 80043a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80043a2:	b111      	cbz	r1, 80043aa <_reclaim_reent+0x6e>
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 f853 	bl	8004450 <_free_r>
 80043aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80043ac:	b111      	cbz	r1, 80043b4 <_reclaim_reent+0x78>
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 f84e 	bl	8004450 <_free_r>
 80043b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043b6:	b111      	cbz	r1, 80043be <_reclaim_reent+0x82>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 f849 	bl	8004450 <_free_r>
 80043be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80043c0:	b111      	cbz	r1, 80043c8 <_reclaim_reent+0x8c>
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 f844 	bl	8004450 <_free_r>
 80043c8:	6a23      	ldr	r3, [r4, #32]
 80043ca:	b14b      	cbz	r3, 80043e0 <_reclaim_reent+0xa4>
 80043cc:	4620      	mov	r0, r4
 80043ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043d2:	4718      	bx	r3
 80043d4:	680e      	ldr	r6, [r1, #0]
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 f83a 	bl	8004450 <_free_r>
 80043dc:	4631      	mov	r1, r6
 80043de:	e7bb      	b.n	8004358 <_reclaim_reent+0x1c>
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	bf00      	nop
 80043e4:	20000010 	.word	0x20000010

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	2600      	movs	r6, #0
 80043ec:	4d0c      	ldr	r5, [pc, #48]	@ (8004420 <__libc_init_array+0x38>)
 80043ee:	4c0d      	ldr	r4, [pc, #52]	@ (8004424 <__libc_init_array+0x3c>)
 80043f0:	1b64      	subs	r4, r4, r5
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	f000 f87e 	bl	80044f8 <_init>
 80043fc:	2600      	movs	r6, #0
 80043fe:	4d0a      	ldr	r5, [pc, #40]	@ (8004428 <__libc_init_array+0x40>)
 8004400:	4c0a      	ldr	r4, [pc, #40]	@ (800442c <__libc_init_array+0x44>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	42a6      	cmp	r6, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004410:	4798      	blx	r3
 8004412:	3601      	adds	r6, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f855 3b04 	ldr.w	r3, [r5], #4
 800441a:	4798      	blx	r3
 800441c:	3601      	adds	r6, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	080045e0 	.word	0x080045e0
 8004424:	080045e0 	.word	0x080045e0
 8004428:	080045e0 	.word	0x080045e0
 800442c:	080045e4 	.word	0x080045e4

08004430 <__retarget_lock_acquire_recursive>:
 8004430:	4770      	bx	lr

08004432 <__retarget_lock_release_recursive>:
 8004432:	4770      	bx	lr

08004434 <memcpy>:
 8004434:	440a      	add	r2, r1
 8004436:	4291      	cmp	r1, r2
 8004438:	f100 33ff 	add.w	r3, r0, #4294967295
 800443c:	d100      	bne.n	8004440 <memcpy+0xc>
 800443e:	4770      	bx	lr
 8004440:	b510      	push	{r4, lr}
 8004442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004446:	4291      	cmp	r1, r2
 8004448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444c:	d1f9      	bne.n	8004442 <memcpy+0xe>
 800444e:	bd10      	pop	{r4, pc}

08004450 <_free_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4605      	mov	r5, r0
 8004454:	2900      	cmp	r1, #0
 8004456:	d040      	beq.n	80044da <_free_r+0x8a>
 8004458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445c:	1f0c      	subs	r4, r1, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfb8      	it	lt
 8004462:	18e4      	addlt	r4, r4, r3
 8004464:	f000 f83c 	bl	80044e0 <__malloc_lock>
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <_free_r+0x8c>)
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	b933      	cbnz	r3, 800447c <_free_r+0x2c>
 800446e:	6063      	str	r3, [r4, #4]
 8004470:	6014      	str	r4, [r2, #0]
 8004472:	4628      	mov	r0, r5
 8004474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004478:	f000 b838 	b.w	80044ec <__malloc_unlock>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d908      	bls.n	8004492 <_free_r+0x42>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	1821      	adds	r1, r4, r0
 8004484:	428b      	cmp	r3, r1
 8004486:	bf01      	itttt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	1809      	addeq	r1, r1, r0
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	e7ed      	b.n	800446e <_free_r+0x1e>
 8004492:	461a      	mov	r2, r3
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b10b      	cbz	r3, 800449c <_free_r+0x4c>
 8004498:	42a3      	cmp	r3, r4
 800449a:	d9fa      	bls.n	8004492 <_free_r+0x42>
 800449c:	6811      	ldr	r1, [r2, #0]
 800449e:	1850      	adds	r0, r2, r1
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	d10b      	bne.n	80044bc <_free_r+0x6c>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	4401      	add	r1, r0
 80044a8:	1850      	adds	r0, r2, r1
 80044aa:	4283      	cmp	r3, r0
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	d1e0      	bne.n	8004472 <_free_r+0x22>
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4408      	add	r0, r1
 80044b6:	6010      	str	r0, [r2, #0]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	e7da      	b.n	8004472 <_free_r+0x22>
 80044bc:	d902      	bls.n	80044c4 <_free_r+0x74>
 80044be:	230c      	movs	r3, #12
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	e7d6      	b.n	8004472 <_free_r+0x22>
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	1821      	adds	r1, r4, r0
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf01      	itttt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	1809      	addeq	r1, r1, r0
 80044d2:	6021      	streq	r1, [r4, #0]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6054      	str	r4, [r2, #4]
 80044d8:	e7cb      	b.n	8004472 <_free_r+0x22>
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	20001bf0 	.word	0x20001bf0

080044e0 <__malloc_lock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	@ (80044e8 <__malloc_lock+0x8>)
 80044e2:	f7ff bfa5 	b.w	8004430 <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	20001bec 	.word	0x20001bec

080044ec <__malloc_unlock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	@ (80044f4 <__malloc_unlock+0x8>)
 80044ee:	f7ff bfa0 	b.w	8004432 <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	20001bec 	.word	0x20001bec

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
